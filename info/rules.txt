Program -> PackageDecl ImportDecl ClassDecl
PackageDecl -> package FullClassName ;
FullClassName -> id FullClassNameContinue
FullClassNameContinue -> . id FullClassNameContinue
FullClassNameContinue -> null
ImportDecl -> ImportLine ImportDecl
ImportDecl -> null
ImportLine -> import FullClassName ;
ClassDecl -> Modifiers class id Extension { ClassBody }
Extension -> extends id
Extension -> null
Modifiers -> AccessModifier StaticModifier FinalModifier
AccessModifier -> public
AccessModifier -> protected
AccessModifier -> private
AccessModifier -> null
StaticModifier -> static
StaticModifier -> null
FinalModifier -> final
FinalModifier -> null
ClassBody -> ClassMember ClassBody
ClassBody -> null
ClassMember -> Modifiers RestOfClassMember
RestOfClassMember -> Type RestOfClassMember2
RestOfClassMember -> void RestOfClassMember2
Type -> id
BasicType -> int
BasicType -> double
BasicType -> char
BasicType -> boolean
RestOfClassMember2 -> id MethodOrAttr
MethodOrAttr -> MethodContinue
MethodOrAttr -> AttrContinue
MethodContinue -> (MethodParams){MethodBody}
MethodParams -> OneParam MethodParamContinue
OneParam -> Type id
MethodParamContinue -> , OneParam MethodParamContinue
MethodParams -> null
MethodParamContinue -> null
AttrContinue -> AssignAttr NextAttr
AssignAttr -> null
AssignAttr -> = Expression
NextAttr -> ;
NextAttr -> , id AttrContinue
MethodBody -> Statement MethodBody
MethodBody -> null
Statement -> BlockDecl
BlockDecl -> { MethodBody }
Expression -> Term ExprOp
Term -> intConst
Term -> doubleConst
Term -> charConst
Term -> Variable
ExprOp -> ArithmOp Term ExprOp
ExprOp -> null
Term -> (ExprOp)
Variable -> id FunctionExt Link
Link -> . id FunctionExt Link
Link -> [ Expression ] Link
Link -> null
FunctionExt -> (MethodValues)
FunctionExt -> null
Term -> new id (MethodValues)
MethodValues -> Expression ValueContinue
ValueContinue -> , Expression ValueContinue
ValueContinue -> null
ArithmOp -> +
ArithmOp -> -
ArithmOp -> *
ArithmOp -> /
ArithmOp -> %
Statement -> Expression ;
MethodValues -> null
ArithmOp -> =
ArithmOp -> +=
ArithmOp -> -=
ArithmOp -> *=
ArithmOp -> /=
ArithmOp -> %=
Statement -> IfBlock
Statement -> WhileBlock
Statement -> ForBlock
Statement -> ReturnBlock
Statement -> VarDecl
IfBlock -> if ( BoolExpr ) Statement ElseBlock
ElseBlock -> else Statement
WhileBlock -> while ( BoolExpr ) Statement
ForBlock -> for (Type id = Expression; BoolExpr; Expression) Statement
ReturnBlock -> return Expression ;
VarDecl -> BasicType FirstVar NextVar ;
NextVar -> , FirstVar NextVar
NextVar -> null
FirstVar -> id AssignAttr
BoolExpr -> true
BoolExpr -> false
Type -> BasicType